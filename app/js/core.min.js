'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function addClass(elements, className) {
    if (elements.nodeType === 1) {
        elements.classList ? elements.classList.add(className) : elements.className += ' ' + className;
    } else {
        for (var i = 0; i < elements.length; i += 1) {
            elements[i].classList ? elements[i].classList.add(className) : elements[i].className += ' ' + className;
        }
    }
};

function removeClass(elements, className) {
    if (elements.nodeType === 1) {
        elements.className = elements.className.replace(className, '');
        elements.className = elements.className.replace('  ', ' ');
    } else {
        for (var i = 0; i < elements.length; i += 1) {
            elements[i].className = elements[i].className.replace(className, '');
            elements[i].className = elements[i].className.replace('  ', ' ');
        }
    }
};

function hasClass(element, className) {
    if (element.nodeType === 1) {
        return element.classList.contains(className);
    }
};

function getSiblings(element) {
    var siblings = [],
        elements = element.parentElement.children;

    for (var i = 0; i < elements.length; i += 1) {
        if (elements[i].nodeType === 1 && elements[i] !== element) {
            siblings.push(elements[i]);
        }
    }
    return siblings;
}

function loadScripts(array, callback) {
    var loader = function loader(src, handler) {
        var script = document.createElement("script");
        script.src = src;
        script.onload = script.onreadystatechange = function () {
            script.onreadystatechange = script.onload = null;
            handler();
        };
        document.body.appendChild(script);
    };
    (function run() {
        if (array.length != 0) {
            loader(array.shift(), run);
        } else {
            callback && callback();
        }
    })();
}

function addMultipleEventListeners(elements, events, handler) {
    var events_amount = events.length;

    if (elements.nodeType === 1) {
        for (var i = 0; i < events_amount; i += 1) {
            elements.addEventListener(events[i], handler);
        }
    } else {
        for (var _i = 0, l = elements.length; _i < l; _i += 1) {
            for (var j = 0; j < events_amount; j += 1) {
                elements[_i].addEventListener(events[j], handler);
            }
        }
    }
}

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

function compareElements(base, target) {
    var depth_search = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (base === target) {
        return true;
    } else if (base.children.length && depth_search) {
        for (var i = 0; i < base.children.length; i += 1) {
            if (compareElements(base.children[i], target, depth_search)) return true;
        }
        return false;
    } else {
        return false;
    }
}

var Position = function () {
    function Position() {
        var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        _classCallCheck(this, Position);

        this.min = min;
        this.max = max;
        this.current = current;
        this.scroll_ratio = max;
    }

    _createClass(Position, [{
        key: 'setCurrent',
        value: function setCurrent(current) {
            if (current < this.min) {
                this.current = this.min;
            } else if (current > this.max) {
                this.current = this.max;
            } else {
                this.current = current;
            }
        }
    }]);

    return Position;
}();

var Component = function () {
    function Component(element) {
        _classCallCheck(this, Component);

        this.elem = element;
        this.styles = this.elem.currentStyle || window.getComputedStyle(this.elem);
        this.position = new Position();
    }

    /*
    set(axis, current, min, max, is_content) - set basic attributes of component
    current - defines current position of the element
    min - defines minumum position of the element
    max - defines maximum position of the element
    scroll_ratio - defines progress of element movement
    */


    _createClass(Component, [{
        key: 'set',
        value: function set(current, min, max, scroll_ratio) {
            this.position.current = current;
            this.position.min = min;
            this.position.max = max;
            this.position.scroll_ratio = scroll_ratio;
            this.move();
        }

        /*
        scrollMove(axis, delta) - change position of element on scroll event
        delta - defines multiplier of motion
        */

    }, {
        key: 'scrollMove',
        value: function scrollMove(delta) {
            this.position.setCurrent(this.position.current + delta * this.position.scroll_ratio);
            this.move();
        }

        /*
        mouseMove(axis, delta) - change position of element on mouse move event
        delta - defines multiplier of motion
        */

    }, {
        key: 'mouseMove',
        value: function mouseMove(delta) {
            this.position.setCurrent(delta);
            this.move();
        }

        /*
        move() - animate element on the view
        */

    }, {
        key: 'move',
        value: function move() {
            this.elem.style.transform = 'translate3d(0, ' + this.position.current + 'px, 0)';
        }
    }]);

    return Component;
}();

var Scrollbar = function (_Component) {
    _inherits(Scrollbar, _Component);

    function Scrollbar(element) {
        _classCallCheck(this, Scrollbar);

        var _this = _possibleConstructorReturn(this, (Scrollbar.__proto__ || Object.getPrototypeOf(Scrollbar)).call(this, element));

        _this.mouse_hold = false;
        return _this;
    }

    _createClass(Scrollbar, [{
        key: 'init',
        value: function init() {
            this.set();
            this.events();
        }
    }, {
        key: 'set',
        value: function set(options_length) {
            this.label = new Component(this.elem.querySelector('.cwc-select-label'));
            this.dropdown = new Component(this.elem.querySelector('.cwc-select-dropdown'));
            this.dropdown.content = new Component(this.dropdown.elem.querySelector('.cwc-select-content'));
            this.dropdown.track = new Component(this.dropdown.elem.querySelector('.cwc-select-track'));
            this.dropdown.track.thumb = new Component(this.dropdown.track.elem.querySelector('.cwc-select-thumb'));
            this.dropdown.content.options = [];
            var options = this.dropdown.content.elem.querySelectorAll('.cwc-select-option');
            for (var i = 0; i < options.length; i += 1) {
                this.dropdown.content.options.push(new Component(options[i]));
            }

            var hidden_options = (options_length === undefined ? this.dropdown.content.options.length : options_length) - 5;

            if (options_length !== 0) {
                this.dropdown.content.set(0, this.dropdown.elem.clientHeight - this.dropdown.content.elem.offsetHeight, 0, this.dropdown.content.options[0].elem.offsetHeight);
                if (hidden_options !== 0) {
                    this.dropdown.track.thumb.set(0, 0, this.dropdown.track.elem.offsetHeight - this.dropdown.track.thumb.elem.offsetHeight, (this.dropdown.track.elem.offsetHeight - this.dropdown.track.thumb.elem.offsetHeight) / hidden_options);
                }
            }
        }
    }, {
        key: 'refreshDropdown',
        value: function refreshDropdown(options_length) {
            this.set(options_length);
        }
    }, {
        key: 'openDropdown',
        value: function openDropdown() {
            addClass(this.dropdown.elem, 'active');
        }
    }, {
        key: 'closeDropdown',
        value: function closeDropdown() {
            removeClass(this.dropdown.elem, 'active');
        }

        /*
        events() - bind events to the elements
        */

    }, {
        key: 'events',
        value: function events() {
            var _this2 = this;

            this.elem.addEventListener('keydown', function (event) {
                if (event.keyCode === 40) _this2.keyMove(1);
                if (event.keyCode === 38) _this2.keyMove(-1);
                if (event.keyCode === 27) _this2.closeDropdown();
            });

            window.addEventListener('mousedown', function (event) {
                if (!compareElements(_this2.elem, event.target, true)) _this2.closeDropdown();
            });

            /*
            When mouse is over the content and user use mouse scroll. Basically content moves vertically. Holding CTRL button content moves horizontally.
            */
            this.dropdown.content.elem.addEventListener('wheel', function (event) {
                event.preventDefault();
                _this2.mouseScroll(event);
            });
            /*
            When mouse is over certain track and user use mouse scroll.
            */
            this.dropdown.track.elem.addEventListener('wheel', function (event) {
                event.preventDefault();
                _this2.mouseScroll(event);
            });
            /*
            When thumb of certain track is held.
            */
            this.dropdown.track.thumb.elem.addEventListener('mousedown', function (event) {
                _this2.mouse_hold = true;
            });
            /*
            When track is clicked.
            */
            this.dropdown.track.elem.addEventListener('mousedown', function (event) {
                event.preventDefault();
                _this2.mouseMove(event);
            });
            /*
            When mouse is moved. Work only if thumb of certain track is held.
            */
            window.addEventListener('mousemove', function (event) {
                event.preventDefault();
                if (_this2.mouse_hold) _this2.mouseMove(event);
            });
            /*
            When mouse button is released.
            */
            window.addEventListener('mouseup', function (event) {
                event.preventDefault();
                _this2.mouse_hold = false;
            });
        }
    }, {
        key: 'keyMove',
        value: function keyMove(delta) {
            this.dropdown.content.scrollMove(-delta);
            this.dropdown.track.thumb.scrollMove(delta);
        }

        /*
        mouseScroll(event)
        */

    }, {
        key: 'mouseScroll',
        value: function mouseScroll(event) {
            var delta = event.deltaY / 100;
            this.dropdown.content.scrollMove(-delta);
            this.dropdown.track.thumb.scrollMove(delta);
        }
    }, {
        key: 'mouseMove',
        value: function mouseMove(event) {
            var thumb_delta = event.clientY - this.dropdown.track.elem.getBoundingClientRect().top - this.dropdown.track.thumb.elem.offsetHeight / 2,
                content_delta = this.dropdown.content.position.min * (this.dropdown.track.thumb.position.current / this.dropdown.track.thumb.position.max);

            this.dropdown.content.mouseMove(content_delta);
            this.dropdown.track.thumb.mouseMove(thumb_delta);
        }
    }]);

    return Scrollbar;
}(Component);